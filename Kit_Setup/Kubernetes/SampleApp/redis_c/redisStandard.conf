############################## QUERY ENGINE CONFIG ############################

# リーフの親ノードで数値範囲を「x」世代保持します。
# 数値、有効範囲: [0, 2]、デフォルト: 0
#
# search-_numeric-ranges-parents 0

# バックグラウンドインデックス作成時にusleep(1)（1マイクロ秒スリープ）を呼び出すまでに実行する反復回数。
# これによりRedisが他のコマンドを処理できるようにします。
# 数値、有効範囲: [1, UINT32_MAX]、デフォルト: 100
#
# search-bg-index-sleep-gap 100

# 検索クエリで使用されるデフォルトのダイアレクト。
# 数値、有効範囲: [1, 4]、デフォルト: 1
#
# search-default-dialect 1

# フォークGCがクリーンを開始する未クリーンドキュメント数の閾値。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 100
#
# search-fork-gc-clean-threshold 100

# フォークGC失敗後に再試行する間隔（秒）。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 5
#
# search-fork-gc-retry-interval 5

# フォークGCを実行する間隔（秒）（フォークGC使用時のみ有効）。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 30
#
# search-fork-gc-run-interval 30

# フォークGCが終了前にスリープする秒数。
# 数値、有効範囲: [0, LLONG_MAX]、デフォルト: 0
#
# search-fork-gc-sleep-before-exit 0

# GC反復ごとに一度にスキャンするドキュメント数。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 100
#
# search-gc-scan-size 100

# シャード内で開けるインデックスごとの最大カーソル数。
# 数値、有効範囲: [0, LLONG_MAX]、デフォルト: 128
#
# search-index-cursor-limit 128

# ft.aggregateコマンドの最大結果数。
# 数値、有効範囲: [0, (1ULL << 31)]、デフォルト: 1ULL << 31
#
# search-max-aggregate-results 2147483648

# クエリで使用される最大プレフィックス展開数。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 200
#
# search-max-prefix-expansions 200

# 実行時ドキュメントテーブルの最大サイズ（このプロセス用）。
# 数値、有効範囲: [1, 100000000]、デフォルト: 1000000
#
# search-max-doctablesize 1000000

# カーソルに設定できる最大アイドル時間。高く設定するとメモリ消費が増加する可能性あり。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 300000
#
# search-cursor-max-idle 300000

# ft.searchコマンドの最大結果数。
# 数値、有効範囲: [0, 1ULL << 31]、デフォルト: 1000000
#
# search-max-search-results 1000000

# サーバーが操作イベント中にバックグラウンドタスク用に使用するワーカースレッド数。
# 数値、有効範囲: [1, 16]、デフォルト: 4
#
# search-min-operation-workers 4

# 音声マッチング対象となる語の最小長。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 3
#
# search-min-phonetic-term-len 3

# 展開（`*`）のための最小プレフィックス。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 2
#
# search-min-prefix 2

# ステミング対象となる語の最小長。
# 数値、有効範囲: [2, UINT32_MAX]、デフォルト: 4
#
# search-min-stem-len 4

# 配列スロット間の位置オフセット増分（複数テキスト値用）。
# フレーズの分離レベルを制御（ft.searchコマンドのSLOPパラメータ関連）。
# 数値、有効範囲: [1, UINT32_MAX]、デフォルト: 100
#
# search-multi-text-slop 100

# ベクター類似度HNSWインデックスのバッファ制限閾値。
# WORKERSでインデックス作成時、バッファ内のベクター数がこの制限を超えると
# 新しいベクターを直接HNSWに挿入。
# 数値、有効範囲: [0, LLONG_MAX]、デフォルト: 1024
#
# search-tiered-hnsw-buffer-limit 1024

# クエリタイムアウト。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 500
#
# search-timeout 500

# ユニオン内のイテレータ数がこの数以上の場合、ヒープベース実装に切り替え。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 20
#
# search-union-iterator-heap 20

# ベクター類似度インデックスの最大メモリリサイズ（バイト単位）。
# 数値、有効範囲: [0, UINT32_MAX]、デフォルト: 0
#
# search-vss-max-resize 0

# クエリ処理やバックグラウンドタスク用のワーカースレッド数。
# 数値、有効範囲: [0, 16]、デフォルト: 0
# この設定はシャードごとの接続数にも影響。
#
# search-workers 0

# ワーカースレッドプールで同時に実行される高優先度タスク数。
# この数を超えると高・低優先度タスクを交互に実行。
# 数値、有効範囲: [0, LLONG_MAX]、デフォルト: 1
#
# search-workers-priority-bias-threshold 1

# 拡張スコアリング/拡張モジュールのロード。変更不可。
# 文字列、デフォルト: ""
#
# search-ext-load ""

# 中国語トークナイズ用辞書設定ファイルのパス。変更不可。
# 文字列、デフォルト: ""
#
# search-friso-ini ""

# 検索タイムアウト超過時の動作（RETURNまたはFAILを選択）。
# enum、有効値: ["return", "fail"]、デフォルト: "fail"
#
# search-on-timeout fail

# 一部インデックスリソースを2番目のスレッドで解放するかどうか。
# bool、デフォルト: yes
#
# search-_free-resource-on-thread yes

# doubleからfloatへのレガシー圧縮を有効化。
# bool、デフォルト: no
#
# search-_numeric-compress no

# ft.profileの時刻出力を無効化。テスト専用。
# bool、デフォルト: yes
#
# search-_print-profile-clock yes

# 交差イテレータが子イテレータを推定結果数の昇順で並べ替え。
# このフラグを設定すると、ユニオンイテレータも子数×推定結果数でソート。
# bool、デフォルト: no
#
# search-_prioritize-intersect-union-children no

# メモリプールを使用せずに実行。
# bool、デフォルト: no
#
# search-no-mem-pools no

# ガベージコレクションを無効化（このプロセス用）。
# bool、デフォルト: no
#
# search-no-gc no

# 部分的なハッシュ更新時のインデックス最適化コマンドフィルタを有効化。
# bool、デフォルト: no
#
# search-partial-indexed-docs no

# DocID逆インデックスの圧縮を無効化。CPU性能向上。
# bool、デフォルト: no
#
# search-raw-docid-encoding no

# コーディネータースレッドプールの検索スレッド数。
# 数値、有効範囲: [1, LLONG_MAX]、デフォルト: 20
#
# search-threads 20

# トポロジ検証のタイムアウト（ミリ秒）。
# このタイムアウト後、トポロジが完全に接続されていなくても保留中リクエストを処理。
# 数値、有効範囲: [0, LLONG_MAX]、デフォルト: 30000
#
# search-topology-validation-timeout 30000

############################## TIME SERIES CONFIG #############################

# クラスターモードでクロスキー・クエリ用のシャードごとの最大スレッド数
# （TS.MRANGE, TS.MREVRANGE, TS.MGET, TS.QUERYINDEX）。
# この値を増減するとパフォーマンスが変化する場合あり。
# 整数、有効範囲: [1..16]、デフォルト: 3
# ロード時設定パラメータ。
#
# ts-num-threads 3

# TS.ADD, TS.INCRBY, TS.DECRBYで新規作成されるキーのデフォルト圧縮ルール。
# TS.CREATEで作成されたキーには影響なし。
# 新しいタイムシリーズ作成時に適用。
# 文字列、ルール形式はドキュメント参照、デフォルト: 圧縮ルールなし
#
# ts-compaction-policy ""

# 自動作成される圧縮タイムシリーズのデフォルトチャンクエンコーディング。
# ts-compaction-policy指定時に自動作成される各新規圧縮タイムシリーズに適用。
# 有効値: COMPRESSED, UNCOMPRESSED、デフォルト: COMPRESSED
#
# ts-encoding COMPRESSED

# デフォルトの保持期間（ミリ秒）。0は期限なし。
# 新しいタイムシリーズ作成時に適用。
# ts-compaction-policy指定時は、作成された圧縮に対して上書き。
# 整数、有効範囲: [0 .. LLONG_MAX]、デフォルト: 0
#
# ts-retention-policy 0

# 同一タイムスタンプの複数サンプル挿入時のデフォルト処理ポリシー。
# 新しいタイムシリーズ作成時に適用。
# 文字列、有効値: BLOCK, FIRST, LAST, MIN, MAX, SUM、デフォルト: BLOCK
#
# ts-duplicate-policy BLOCK

# 各新規チャンクのデータ部分の初期割当サイズ（バイト）。
# 新しいタイムシリーズ作成時に適用。
# 整数、有効範囲: [48 .. 1048576]、8の倍数、デフォルト: 4096
#
# ts-chunk-size-bytes 4096

# 新規作成タイムシリーズのデフォルト値。
# 多くのセンサーは周期的にデータを報告。測定値の差が無視できる場合、
# 新しい測定値をタイムシリーズに追加しない方が良い場合がある。
# 以下の条件を満たす場合、新しいサンプルは重複とみなされ無視される:
# - タイムシリーズが圧縮でない
# - DUPLICATE_POLICYがLAST
# - サンプルが順序通り追加（timestamp >= max_timestamp）
# - 現在と前回のタイムスタンプ差がts-ignore-max-time-diff以下
# - 現在値と前回最大タイムスタンプ値の絶対値差がts-ignore-max-val-diff以下
# max_timestampはタイムシリーズ内最大タイムスタンプのサンプルのタイムスタンプ、
# value_at_max_timestampはその値。
# ts-ignore-max-time-diff: 整数、有効範囲: [0 .. LLONG_MAX]、デフォルト: 0
# ts-ignore-max-val-diff: 実数、有効範囲: [0 .. DBL_MAX]、デフォルト: 0
#
# ts-ignore-max-time-diff 0
# ts-ignore-max-val-diff 0

########################### BLOOM FILTERS CONFIG ##############################

# BF.ADD, BF.MADD, BF.INSERT, BF.RESERVEで作成される新規Bloomフィルターのデフォルト値。
# 各新規Bloomフィルター作成時に適用。

# エラー率
# 偽陽性の確率。
# 偽陽性率0.1%（1000回に1回）の場合は0.001を指定。
# 実数、有効範囲: (0 .. 1)、0.25超は0.25扱い、デフォルト: 0.01
#
# bf-error-rate 0.01

# 初期容量
# フィルターに追加予定のエントリ数。
# 整数、有効範囲: [1 .. 1GB]、デフォルト: 100
#
# bf-initial-size 100

# 拡張係数
# 容量到達時、新しいサブフィルターを作成。
# 新サブフィルターのサイズは前回サブフィルターのサイズ×拡張係数。
# 整数、[0 .. 32768]。0はNONSCALINGと同等。デフォルト: 2
#
# bf-expansion-factor 2

########################### CUCKOO FILTERS CONFIG #############################

# CF.ADD, CF.ADDNX, CF.INSERT, CF.INSERTNX, CF.RESERVEで作成される新規Cuckooフィルターのデフォルト値。
# 各新規Cuckooフィルター作成時に適用。

# 初期容量
# フィルターは100%まで埋まらない場合が多い。
# 拡張を避けたい場合は余分に予約推奨。
# 値は次の2のべき乗に切り上げ。
# 整数、有効範囲: [2*cf-bucket-size .. 1GB]、デフォルト: 1024
#
# cf-initial-size 1024

# バケット内アイテム数
# バケットサイズ1時の最小偽陽性率は2/255（約0.78%）。
# バケットを大きくするとエラー率は線形増加、充填率は向上。
# 整数、有効範囲: [1 .. 255]、デフォルト: 2
#
# cf-bucket-size 2

# 最大反復回数
# フィルターが満杯と判断され追加フィルター作成前にバケット間でアイテムを入れ替える試行回数。
# 低い値は性能向上、高い値は充填率向上。
# 整数、有効範囲: [1 .. 65535]、デフォルト: 20
#
# cf-max-iterations 20

# 拡張係数
# 新フィルター作成時、現在フィルターサイズ×この係数。
# 整数、有効範囲: [0 .. 32768]、0はNONSCALINGと同等、デフォルト: 1
#
# cf-expansion-factor 1

# 最大拡張回数
# 整数、有効範囲: [1 .. 65536]、デフォルト: 32
#
# cf-max-expansions 32

################################## SECURITY ###################################
#
# 以下はコマンドカテゴリとその意味の一覧:
#
# * search - クエリエンジン関連
# * json - データ型: JSON関連
# * timeseries - データ型: タイムシリーズ関連
# * bloom - データ型: Bloomフィルター関連
# * cuckoo - データ型: Cuckooフィルター関連
# * topk - データ型: top-k関連
# * cms - データ型: count-min sketch関連
# * tdigest - データ型: t-digest関連
